openapi: 3.0.3
info:
  title: Rug API v3.6 (Solana Wallet Management)
  version: "3.6.0"
  description: |
    ## üöÄ Rug API v3.6 - Solana Wallet Management Platform

    **Une API Flask compl√®te et moderne pour g√©rer des projets et wallets Solana sur devnet/mainnet/testnet.**

    ### üéØ Fonctionnalit√©s principales
    
    **üíº Gestion de projets :**
    - Cr√©ation, modification et suppression de projets
    - Syst√®me de sauvegarde automatique et d'import/export
    - Organisation hi√©rarchique des wallets par projet
    
    **üîê Gestion de wallets :**
    - G√©n√©ration automatique de wallets Solana
    - Import de wallets existants via cl√© priv√©e
    - Consultation des soldes en temps r√©el
    - Sauvegarde s√©curis√©e avec chiffrement
    
    **üí∏ Syst√®me de transferts avanc√© :**
    - Airdrop SOL sur devnet (faucet int√©gr√©)
    - Transferts SOL entre wallets avec gestion des frais
    - Mixing automatique (strat√©gies random/roundrobin)
    - Consolidation intelligente des soldes
    
    **ü™ô Gestion de tokens :**
    - Configuration des m√©tadonn√©es de tokens
    - Int√©gration Pump.fun pour cr√©ation de tokens
    - Support complet des standards SPL Token
    
    ### üõ°Ô∏è S√©curit√© & Authentication
    - Authentication par cl√© API (header `x-api-key`)
    - Chiffrement des cl√©s priv√©es
    - Logs d'audit complets
    - Support multi-cluster (devnet/testnet/mainnet)
    
    ### üîß Configuration r√©seau
    - RPC personnalisables par cluster
    - Gestion automatique des timeouts
    - Retry logic int√©gr√©e pour la r√©silience
    
    ### üìä Monitoring & Logs
    - Endpoint `/health` pour surveillance
    - Logs d√©taill√©s des transactions
    - M√©triques de performance
    
    **‚ö° Version 3.6 - Nouveaut√©s :**
    - Interface Swagger UI avec th√®me sombre
    - Am√©liorations de performance
    - Documentation API enrichie
    - Support √©tendu des m√©tadonn√©es de tokens
  contact:
    name: Rug API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Local

tags:
  - name: Health
  - name: Projects
  - name: Wallets
  - name: Transfers
  - name: Tokens

security:
  - ApiKeyAuth: []

paths:

  /health:
    get:
      tags: [Health]
      summary: ü©∫ V√©rification de l'√©tat de sant√© de l'API
      description: |
        Endpoint de monitoring pour v√©rifier que l'API fonctionne correctement.
        Retourne des informations sur la configuration actuelle et l'√©tat des services.
      operationId: healthCheck
      security: []  # Pas d'authentification requise
      responses:
        "200":
          description: ‚úÖ API op√©rationnelle
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean, example: true }
                  service: { type: string, example: "solana-api" }
                  time: { type: string, format: date-time, example: "2025-09-14T17:30:00.000Z" }
                  data_dir: { type: string, example: "./data" }
                  default_rpc: { type: string, example: "https://api.devnet.solana.com" }
                  cluster: { type: string, example: "devnet" }
                  api_key_set: { type: boolean, example: false }
              examples:
                devnet_config:
                  summary: Configuration Devnet
                  value:
                    ok: true
                    service: "solana-api"
                    time: "2025-09-14T17:30:00.000Z"
                    data_dir: "./data"
                    default_rpc: "https://api.devnet.solana.com"
                    cluster: "devnet"
                    api_key_set: false
                mainnet_config:
                  summary: Configuration Mainnet avec API Key
                  value:
                    ok: true
                    service: "solana-api"
                    time: "2025-09-14T17:30:00.000Z"
                    data_dir: "./data"
                    default_rpc: "https://api.mainnet-beta.solana.com"
                    cluster: "mainnet"
                    api_key_set: true
        "503":
          description: ‚ùå Service temporairement indisponible
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean, example: false }
                  error: { type: string, example: "Database connection failed" }
                  service: { type: string, example: "solana-api" }
              examples:
                service_down:
                  summary: Service indisponible
                  value:
                    ok: false
                    error: "Database connection failed"
                    service: "solana-api"

  # ===================== Projects =====================

  /api/v1/projects:
    get:
      tags: [Projects]
      summary: üìÇ Lister tous les projets
      description: |
        R√©cup√®re la liste compl√®te de tous les projets avec leurs informations de base.
        Chaque projet inclut le nombre de wallets associ√©s et la date de cr√©ation.
      operationId: listProjects
      responses:
        "200":
          description: ‚úÖ Liste des projets r√©cup√©r√©e avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean, example: true }
                  projects:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProjectSummary"
              examples:
                projects_list:
                  summary: Liste de projets avec wallets
                  value:
                    ok: true
                    projects:
                      - project_id: "c3a1d93e-4b5f-4e8a-9f7e-1d2e3f4g5h6i"
                        name: "Mon Projet DeFi"
                        slug: "mon-projet-defi"
                        created_at: "2025-09-14T10:00:00.000Z"
                        wallets: 25
                      - project_id: "588958bc-7a9b-4c1d-8e5f-2g3h4i5j6k7l"
                        name: "Trading Bot v2"
                        slug: "trading-bot-v2"
                        created_at: "2025-09-13T14:30:00.000Z"
                        wallets: 100
                empty_list:
                  summary: Aucun projet existant
                  value:
                    ok: true
                    projects: []
        "401":
          description: üîí Authentication requise
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                missing_api_key:
                  summary: Cl√© API manquante
                  value:
                    ok: false
                    error: "Authentication required"
                    message: "API key missing in x-api-key header"
        "500":
          description: üí• Erreur serveur interne
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                server_error:
                  summary: Erreur de base de donn√©es
                  value:
                    ok: false
                    error: "Internal server error"
                    message: "Unable to fetch projects from database"
    post:
      tags: [Projects]
      summary: ‚ûï Cr√©er un nouveau projet
      description: |
        Cr√©e un nouveau projet Solana avec un nom unique. 
        Le projet servira de conteneur pour organiser les wallets et tokens.
        
        **R√®gles de validation :**
        - Nom obligatoire, 3-100 caract√®res
        - Caract√®res autoris√©s : lettres, chiffres, espaces, tirets
        - Le slug est g√©n√©r√© automatiquement
      operationId: createProject
      requestBody:
        required: true
        description: Informations du nouveau projet
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: 
                  type: string
                  minLength: 3
                  maxLength: 100
                  pattern: "^[a-zA-Z0-9\\s\\-_√Ä-√ø]+$"
                  example: "Mon Nouveau Projet DeFi"
                  description: "Nom du projet (3-100 caract√®res, lettres/chiffres/espaces/tirets)"
            examples:
              defi_project:
                summary: Projet DeFi
                value:
                  name: "Mon Nouveau Projet DeFi"
              trading_bot:
                summary: Bot de trading
                value:
                  name: "Bot Trading Solana v3"
              nft_collection:
                summary: Collection NFT
                value:
                  name: "Ma Collection NFT Exclusive"
      responses:
        "201":
          description: ‚úÖ Projet cr√©√© avec succ√®s
          headers:
            Location:
              description: URL du projet cr√©√©
              schema:
                type: string
                example: "/api/v1/projects/c3a1d93e-4b5f-4e8a-9f7e-1d2e3f4g5h6i"
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean, example: true }
                  project:
                    $ref: "#/components/schemas/ProjectDetail"
              examples:
                new_project:
                  summary: Nouveau projet cr√©√©
                  value:
                    ok: true
                    project:
                      project_id: "c3a1d93e-4b5f-4e8a-9f7e-1d2e3f4g5h6i"
                      name: "Mon Nouveau Projet DeFi"
                      slug: "mon-nouveau-projet-defi"
                      created_at: "2025-09-14T17:45:00.000Z"
                      wallets: []
                      token:
                        name: null
                        symbol: null
                        description: null
                        image_uri: null
                        website: null
                        twitter: null
                        telegram: null
        "400":
          description: ‚ùå Donn√©es de requ√™te invalides
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalid_name:
                  summary: Nom invalide
                  value:
                    ok: false
                    error: "Validation failed"
                    message: "Project name must be 3-100 characters"
                    details:
                      field: "name"
                      value: "ab"
                      constraint: "minLength: 3"
                duplicate_name:
                  summary: Nom d√©j√† utilis√©
                  value:
                    ok: false
                    error: "Conflict"
                    message: "A project with this name already exists"
                    existing_project_id: "588958bc-7a9b-4c1d-8e5f-2g3h4i5j6k7l"
        "401":
          description: üîí Authentication requise
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "413":
          description: üìè Payload trop volumineux
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                payload_too_large:
                  summary: Donn√©es trop volumineuses
                  value:
                    ok: false
                    error: "Payload too large"
                    message: "Request body exceeds maximum size limit"
        "429":
          description: ‚è≥ Trop de requ√™tes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                rate_limited:
                  summary: Limite de d√©bit d√©pass√©e
                  value:
                    ok: false
                    error: "Rate limit exceeded"
                    message: "Too many requests, please try again later"
                    retry_after: 60
        "500":
          description: üí• Erreur serveur interne
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/projects/{project_id}:
    parameters:
      - in: path
        name: project_id
        required: true
        schema: { type: string }
    get:
      tags: [Projects]
      summary: D√©tail d‚Äôun projet
      responses:
        "200":
          description: Projet d√©taill√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectDetailResponse"
        "404": { description: Projet introuvable }
    patch:
      tags: [Projects]
      summary: Renommer un projet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
      responses:
        "200": { description: OK }
        "404": { description: Projet introuvable }
    delete:
      tags: [Projects]
      summary: Supprimer un projet (avec backup)
      responses:
        "200": { description: Projet supprim√© }
        "404": { description: Projet introuvable }

  /api/v1/projects/{project_id}/export:
    parameters:
      - in: path
        name: project_id
        required: true
        schema: { type: string }
    get:
      tags: [Projects]
      summary: Exporter un projet (JSON brut)
      responses:
        "200":
          description: JSON de sauvegarde du projet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectBackup"

  /api/v1/projects/import:
    post:
      tags: [Projects]
      summary: Importer un projet (JSON brut)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectBackup"
      responses:
        "200":
          description: Import OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  project_id: { type: string }
                  name: { type: string }
                  wallets: { type: integer }

  # =============== Wallets (dans un projet) ===============

  /api/v1/projects/{project_id}/wallets:
    parameters:
      - in: path
        name: project_id
        required: true
        schema: { type: string }
    get:
      tags: [Wallets]
      summary: Lister les wallets d‚Äôun projet
      parameters:
        - in: query
          name: with_balance
          schema: { type: string, enum: ["true","false"] }
      responses:
        "200":
          description: Liste de wallets
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  project_id: { type: string }
                  name: { type: string }
                  wallets:
                    type: array
                    items:
                      $ref: "#/components/schemas/WalletPublic"
    post:
      tags: [Wallets]
      summary: G√©n√©rer N wallets dans un projet
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                n:
                  type: integer
                  minimum: 1
                  maximum: 1000
                  default: 1
      responses:
        "201":
          description: Wallets cr√©√©s
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  created: { type: integer }
                  wallets:
                    type: array
                    items:
                      $ref: "#/components/schemas/WalletFull"

  /api/v1/projects/{project_id}/wallets/import:
    parameters:
      - in: path
        name: project_id
        required: true
        schema: { type: string }
    post:
      tags: [Wallets]
      summary: Importer un/plusieurs wallets via cl√© priv√©e
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                private_key: { type: string }
                private_keys:
                  type: array
                  items: { type: string }
      responses:
        "200":
          description: Wallet(s) import√©(s)
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  imported: { type: integer }
                  wallets:
                    type: array
                    items:
                      $ref: "#/components/schemas/WalletFull"

  /api/v1/projects/{project_id}/wallets/{wallet_id}:
    parameters:
      - in: path
        name: project_id
        required: true
        schema: { type: string }
      - in: path
        name: wallet_id
        required: true
        schema: { type: string }
    delete:
      tags: [Wallets]
      summary: Supprimer un wallet du projet (backup JSON)
      responses:
        "200": { description: Wallet supprim√© }
        "404": { description: Introuvable }

  # =============== Wallets (globaux) ===============

  /api/v1/wallets/{wallet_id}:
    parameters:
      - in: path
        name: wallet_id
        required: true
        schema: { type: string }
    get:
      tags: [Wallets]
      summary: D√©tail complet d‚Äôun wallet (id, name, pub/priv, date, solde optionnel)
      parameters:
        - in: query
          name: with_balance
          schema: { type: string, enum: ["true","false"] }
      responses:
        "200":
          description: D√©tail du wallet
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  wallet:
                    $ref: "#/components/schemas/WalletFull"
        "404": { description: Introuvable }
    patch:
      tags: [Wallets]
      summary: Renommer un wallet par ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
      responses:
        "200": { description: OK }
        "404": { description: Introuvable }

  /api/v1/wallets/{wallet_id}/export:
    parameters:
      - in: path
        name: wallet_id
        required: true
        schema: { type: string }
    get:
      tags: [Wallets]
      summary: Exporter un wallet (JSON brut)
      responses:
        "200":
          description: Fichier JSON
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletBackup"

  /api/v1/wallets/{address}/balance:
    parameters:
      - in: path
        name: address
        required: true
        schema: { type: string }
      - in: query
        name: cluster
        schema: { type: string, enum: [devnet, testnet, mainnet] }
      - in: query
        name: rpc
        schema: { type: string }
    get:
      tags: [Wallets]
      summary: Solde SOL d‚Äôune adresse
      responses:
        "200":
          description: Solde
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletBalanceResponse"
        "400": { description: Requ√™te invalide }

  # ===================== Transfers / Airdrop =====================

  /api/v1/airdrop:
    post:
      tags: [Transfers]
      summary: ü™Ç Airdrop de SOL (Devnet uniquement)
      description: |
        Demande un airdrop de SOL depuis le faucet Solana Devnet vers une adresse sp√©cifi√©e.
        
        **‚ö†Ô∏è Limitations importantes :**
        - **Uniquement sur Devnet** - Ne fonctionne pas sur Mainnet/Testnet
        - Limite standard du faucet Solana (g√©n√©ralement 1-2 SOL par requ√™te)
        - Throttling possible en cas de requ√™tes fr√©quentes
        - L'adresse doit √™tre une cl√© publique Solana valide
        
        **üí° Utilisation recommand√©e :**
        - Tests et d√©veloppement sur Devnet
        - Alimenter des wallets de test
        - Pr√©parer des transferts ou interactions avec smart contracts
      operationId: requestAirdrop
      security: []  # Pas d'authentification requise pour l'airdrop
      requestBody:
        required: true
        description: Param√®tres de l'airdrop
        content:
          application/json:
            schema:
              type: object
              required: [address]
              properties:
                address:
                  type: string
                  pattern: "^[1-9A-HJ-NP-Za-km-z]{32,44}$"
                  example: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  description: "Adresse Solana valide (Base58, 32-44 caract√®res)"
                sol:
                  type: number
                  format: float
                  minimum: 0.001
                  maximum: 5.0
                  default: 1.0
                  example: 1.0
                  description: "Montant de SOL √† airdropper (0.001-5.0 SOL)"
            examples:
              standard_airdrop:
                summary: Airdrop standard 1 SOL
                value:
                  address: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                  sol: 1.0
              small_amount:
                summary: Petit montant pour tests
                value:
                  address: "DjVE6JNiYqPL2QXyCUUh8rNjHrbz9hXHNYt99MQ59qw1"
                  sol: 0.1
              max_airdrop:
                summary: Montant maximum
                value:
                  address: "8WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAXXX"
                  sol: 2.0
      responses:
        "200":
          description: ‚úÖ Airdrop r√©ussi
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean, example: true }
                  address: { type: string, example: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM" }
                  amount_sol: { type: number, format: float, example: 1.0 }
                  signature: { type: string, example: "3KWAxZKKKK1HHJMJKgU8CdLHJKxKKHhzJJhJHj3hJJhJHj3hJJhJHj3hJJhJHj3hJJhJHj3hJJhJHj3hJJ" }
                  cluster: { type: string, example: "devnet" }
                  rpc_url: { type: string, example: "https://api.devnet.solana.com" }
                  confirmation: { type: string, example: "finalized" }
              examples:
                successful_airdrop:
                  summary: Airdrop r√©ussi
                  value:
                    ok: true
                    address: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM"
                    amount_sol: 1.0
                    signature: "5j4KWAxZ1KKK1HHJMJKgU8CdLHJKxKKHhzJJhJHj3hJJhJHj3hJJhJHj3hJJhJHj3hJJhJHj3hJJhJHj3hJJ7Y"
                    cluster: "devnet"
                    rpc_url: "https://api.devnet.solana.com"
                    confirmation: "finalized"
        "400":
          description: ‚ùå Requ√™te invalide
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalid_address:
                  summary: Adresse Solana invalide
                  value:
                    ok: false
                    error: "Invalid address"
                    message: "The provided address is not a valid Solana public key"
                    details:
                      field: "address"
                      value: "invalid_address_123"
                      expected_format: "Base58 encoded, 32-44 characters"
                invalid_amount:
                  summary: Montant invalide
                  value:
                    ok: false
                    error: "Invalid amount"
                    message: "SOL amount must be between 0.001 and 5.0"
                    details:
                      field: "sol"
                      value: 10.0
                      min: 0.001
                      max: 5.0
                mainnet_not_supported:
                  summary: Cluster non support√©
                  value:
                    ok: false
                    error: "Cluster not supported"
                    message: "Airdrop only available on devnet cluster"
                    current_cluster: "mainnet"
                    supported_clusters: ["devnet"]
        "429":
          description: ‚è≥ Trop de requ√™tes - Rate limiting du faucet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                rate_limited:
                  summary: Limite de d√©bit faucet d√©pass√©e
                  value:
                    ok: false
                    error: "Rate limit exceeded"
                    message: "Too many airdrop requests, please try again later"
                    retry_after_seconds: 300
                    last_airdrop: "2025-09-14T17:40:00.000Z"
        "500":
          description: üí• Erreur du faucet Solana
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                faucet_error:
                  summary: Faucet indisponible
                  value:
                    ok: false
                    error: "Faucet error"
                    message: "Solana devnet faucet is temporarily unavailable"
                    details:
                      faucet_status: "unavailable"
                      suggested_action: "Try again in a few minutes or use alternative faucet"
                network_error:
                  summary: Erreur r√©seau RPC
                  value:
                    ok: false
                    error: "Network error"
                    message: "Unable to connect to Solana devnet RPC"
                    details:
                      rpc_url: "https://api.devnet.solana.com"
                      error_type: "connection_timeout"
        "503":
          description: üö´ Service temporairement indisponible
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                service_maintenance:
                  summary: Maintenance programm√©e
                  value:
                    ok: false
                    error: "Service unavailable"
                    message: "Airdrop service is under maintenance"
                    estimated_duration_minutes: 30
                    maintenance_reason: "Scheduled devnet upgrade"

  /api/v1/wallets/{wallet_id}/transfer:
    parameters:
      - in: path
        name: wallet_id
        required: true
        schema: { type: string }
      - in: query
        name: cluster
        schema: { type: string, enum: [devnet, testnet, mainnet] }
      - in: query
        name: rpc
        schema: { type: string }
    post:
      tags: [Transfers]
      summary: Transf√©rer des SOL (wallet_id ‚Üí pubkey destination)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [recipient_pubkey, amount_sol]
              properties:
                recipient_pubkey: { type: string }
                amount_sol:
                  type: number
                  format: float
      responses:
        "200":
          description: Transfert effectu√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferResult"
        "400": { description: Requ√™te invalide }
        "404": { description: Introuvable }
        "500": { description: Erreur interne }

  /api/v1/wallets/mix:
    post:
      tags: [Transfers]
      summary: Mixer des SOL entre wallets (random/roundrobin)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [wallet_ids]
              properties:
                wallet_ids:
                  type: array
                  items: { type: string }
                strategy:
                  type: string
                  enum: [random, roundrobin]
                  default: random
      responses:
        "200":
          description: Historique des transferts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MixResponse"
        "400": { description: Requ√™te invalide }
        "404": { description: Introuvable }
        "500": { description: Erreur mix }

  /api/v1/wallets/consolidate/{target_wallet_id}:
    parameters:
      - in: path
        name: target_wallet_id
        required: true
        schema: { type: string }
    post:
      tags: [Transfers]
      summary: Consolider les soldes vers un wallet cible
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id: { type: string }
                min_reserve_sol:
                  type: number
                  format: float
                  default: 0.00001
      responses:
        "200":
          description: Historique + ignor√©s
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsolidateResponse"
        "400": { description: Requ√™te invalide }
        "404": { description: Introuvable }

  # ===================== Tokens =====================

  /api/v1/projects/{project_id}/token:
    parameters:
      - in: path
        name: project_id
        required: true
        schema: { type: string }
    patch:
      tags: [Tokens]
      summary: √âditer les m√©tadonn√©es du token du projet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenPatchRequest"
      responses:
        "200":
          description: M√©tadonn√©es mises √† jour
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  token: { $ref: "#/components/schemas/Token" }
    delete:
      tags: [Tokens]
      summary: R√©initialiser les m√©tadonn√©es du token
      responses:
        "200": { description: Reset OK }

  /api/v1/projects/{project_id}/token/create:
    parameters:
      - in: path
        name: project_id
        required: true
        schema: { type: string }
    post:
      tags: [Tokens]
      summary: Cr√©er r√©ellement le token via Pump.fun
      responses:
        "202":
          description: Accepted (cl√© API requise)

components:

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key

  schemas:

    ErrorResponse:
      type: object
      required: [ok, error, message]
      properties:
        ok: 
          type: boolean
          example: false
          description: Indique que la requ√™te a √©chou√©
        error:
          type: string
          example: "Validation failed"
          description: Type d'erreur principal
        message:
          type: string
          example: "The provided data is invalid"
          description: Message d'erreur d√©taill√© pour l'utilisateur
        details:
          type: object
          description: Informations suppl√©mentaires sur l'erreur (optionnel)
          additionalProperties: true
        timestamp:
          type: string
          format: date-time
          example: "2025-09-14T17:45:00.000Z"
          description: Horodatage de l'erreur
        request_id:
          type: string
          example: "req_123e4567-e89b-12d3-a456-426614174000"
          description: Identifiant unique de la requ√™te pour le d√©bogage

    ProjectSummary:
      type: object
      properties:
        project_id: { type: string }
        name: { type: string }
        slug: { type: string }
        created_at: { type: string, format: date-time }
        wallets: { type: integer }

    ProjectDetail:
      type: object
      properties:
        project_id: { type: string }
        name: { type: string }
        slug: { type: string }
        created_at: { type: string, format: date-time }
        wallets:
          type: array
          items: { $ref: "#/components/schemas/WalletFull" }
        token:
          $ref: "#/components/schemas/Token"

    ProjectDetailResponse:
      type: object
      properties:
        ok: { type: boolean }
        project:
          $ref: "#/components/schemas/ProjectDetail"

    ProjectBackup:
      type: object
      properties:
        type: { type: string, example: project_backup }
        timestamp: { type: string }
        project:
          type: object
          properties:
            project_id: { type: string }
            name: { type: string }
            slug: { type: string }
        wallets:
          type: array
          items:
            $ref: "#/components/schemas/WalletBackupEntry"
        wallets_file:
          type: object
          description: Copie √©ventuelle de wallets.json

    WalletPublic:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        address: { type: string }
        created_at: { type: string }
        balance_sol: { type: number, format: float }

    WalletFull:
      allOf:
        - $ref: "#/components/schemas/WalletPublic"
        - type: object
          properties:
            private_key: { type: string, description: "cl√© priv√©e base58 (en clair ici)" }
            private_key_json_64:
              type: array
              items: { type: integer }

    WalletBackupEntry:
      type: object
      properties:
        address: { type: string }
        private_key: { type: string }

    WalletBackup:
      type: object
      properties:
        type: { type: string, example: wallet_backup }
        timestamp: { type: string }
        project:
          type: object
          properties:
            project_id: { type: string }
            name: { type: string }
            slug: { type: string }
        wallet:
          $ref: "#/components/schemas/WalletBackupEntry"

    WalletBalanceResponse:
      type: object
      properties:
        ok: { type: boolean }
        address: { type: string }
        balance_sol: { type: number, format: float }
        rpc_url: { type: string }
        cluster: { type: string }

    TransferResult:
      type: object
      properties:
        ok: { type: boolean }
        from_wallet_id: { type: string }
        from_address: { type: string }
        to_address: { type: string }
        amount_sol: { type: number, format: float }
        signature: { type: string }
        rpc_url: { type: string }

    MixHistoryItem:
      type: object
      properties:
        from_wallet_id: { type: string }
        from_address: { type: string }
        to_address: { type: string }
        amount_sol: { type: number, format: float }
        signature: { type: string }

    MixResponse:
      type: object
      properties:
        ok: { type: boolean }
        strategy: { type: string }
        transfers:
          type: array
          items:
            $ref: "#/components/schemas/MixHistoryItem"

    ConsolidateHistoryItem:
      type: object
      properties:
        from_wallet_id: { type: string }
        from_address: { type: string }
        to_wallet_id: { type: string }
        to_address: { type: string }
        amount_sol: { type: number, format: float }
        signature: { type: string }

    ConsolidateResponse:
      type: object
      properties:
        ok: { type: boolean }
        target: { type: string }
        transfers:
          type: array
          items:
            $ref: "#/components/schemas/ConsolidateHistoryItem"
        skipped:
          type: array
          items:
            type: object
            properties:
              wallet_id: { type: string }
              reason: { type: string }

    Token:
      type: object
      properties:
        name: { type: string, example: "MyMeme" }
        symbol: { type: string, example: "MEME" }
        description: { type: string }
        image_uri: { type: string }
        website: { type: string }
        twitter: { type: string }
        telegram: { type: string }

    TokenPatchRequest:
      type: object
      properties:
        name: { type: string }
        symbol: { type: string }
        description: { type: string }
        image_uri: { type: string }
        website: { type: string }
        twitter: { type: string }
        telegram: { type: string }
