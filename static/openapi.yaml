openapi: 3.0.3
info:
  title: Phmto API (Solana Wallet)
  version: "3.5.0"
  description: >
    API Flask pour gérer des projets & wallets Solana (devnet/mainnet).
    Inclut airdrop (devnet), transferts, mix, consolidation, import/export,
    et gestion de token avec création via Pump.fun.

servers:
  - url: /
    description: Same origin

tags:
  - name: Health
  - name: Projects
  - name: Wallets
  - name: Transfers
  - name: Tokens

security:
  - ApiKeyAuth: []

paths:

  /health:
    get:
      tags: [Health]
      summary: Ping de santé
      responses:
        "200": { description: OK }

  # ===================== Projects =====================

  /api/v1/projects:
    get:
      tags: [Projects]
      summary: Lister tous les projets
      responses:
        "200":
          description: Liste de projets
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  projects:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProjectSummary"
    post:
      tags: [Projects]
      summary: Créer un projet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
      responses:
        "201":
          description: Projet créé
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  project:
                    $ref: "#/components/schemas/ProjectDetail"

  /api/v1/projects/{project_id}:
    parameters:
      - in: path
        name: project_id
        required: true
        schema: { type: string }
    get:
      tags: [Projects]
      summary: Détail d’un projet
      responses:
        "200":
          description: Projet détaillé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectDetailResponse"
        "404": { description: Projet introuvable }
    patch:
      tags: [Projects]
      summary: Renommer un projet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
      responses:
        "200": { description: OK }
        "404": { description: Projet introuvable }
    delete:
      tags: [Projects]
      summary: Supprimer un projet (avec backup)
      responses:
        "200": { description: Projet supprimé }
        "404": { description: Projet introuvable }

  /api/v1/projects/{project_id}/export:
    parameters:
      - in: path
        name: project_id
        required: true
        schema: { type: string }
    get:
      tags: [Projects]
      summary: Exporter un projet (JSON brut)
      responses:
        "200":
          description: JSON de sauvegarde du projet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectBackup"

  /api/v1/projects/import:
    post:
      tags: [Projects]
      summary: Importer un projet (JSON brut)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectBackup"
      responses:
        "200":
          description: Import OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  project_id: { type: string }
                  name: { type: string }
                  wallets: { type: integer }

  # =============== Wallets (dans un projet) ===============

  /api/v1/projects/{project_id}/wallets:
    parameters:
      - in: path
        name: project_id
        required: true
        schema: { type: string }
    get:
      tags: [Wallets]
      summary: Lister les wallets d’un projet
      parameters:
        - in: query
          name: with_balance
          schema: { type: string, enum: ["true","false"] }
      responses:
        "200":
          description: Liste de wallets
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  project_id: { type: string }
                  name: { type: string }
                  wallets:
                    type: array
                    items:
                      $ref: "#/components/schemas/WalletPublic"
    post:
      tags: [Wallets]
      summary: Générer N wallets dans un projet
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                n:
                  type: integer
                  minimum: 1
                  maximum: 1000
                  default: 1
      responses:
        "201":
          description: Wallets créés
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  created: { type: integer }
                  wallets:
                    type: array
                    items:
                      $ref: "#/components/schemas/WalletFull"

  /api/v1/projects/{project_id}/wallets/import:
    parameters:
      - in: path
        name: project_id
        required: true
        schema: { type: string }
    post:
      tags: [Wallets]
      summary: Importer un/plusieurs wallets via clé privée
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                private_key: { type: string }
                private_keys:
                  type: array
                  items: { type: string }
      responses:
        "200":
          description: Wallet(s) importé(s)
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  imported: { type: integer }
                  wallets:
                    type: array
                    items:
                      $ref: "#/components/schemas/WalletFull"

  /api/v1/projects/{project_id}/wallets/{wallet_id}:
    parameters:
      - in: path
        name: project_id
        required: true
        schema: { type: string }
      - in: path
        name: wallet_id
        required: true
        schema: { type: string }
    delete:
      tags: [Wallets]
      summary: Supprimer un wallet du projet (backup JSON)
      responses:
        "200": { description: Wallet supprimé }
        "404": { description: Introuvable }

  # =============== Wallets (globaux) ===============

  /api/v1/wallets/{wallet_id}:
    parameters:
      - in: path
        name: wallet_id
        required: true
        schema: { type: string }
    get:
      tags: [Wallets]
      summary: Détail complet d’un wallet (id, name, pub/priv, date, solde optionnel)
      parameters:
        - in: query
          name: with_balance
          schema: { type: string, enum: ["true","false"] }
      responses:
        "200":
          description: Détail du wallet
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  wallet:
                    $ref: "#/components/schemas/WalletFull"
        "404": { description: Introuvable }
    patch:
      tags: [Wallets]
      summary: Renommer un wallet par ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
      responses:
        "200": { description: OK }
        "404": { description: Introuvable }

  /api/v1/wallets/{wallet_id}/export:
    parameters:
      - in: path
        name: wallet_id
        required: true
        schema: { type: string }
    get:
      tags: [Wallets]
      summary: Exporter un wallet (JSON brut)
      responses:
        "200":
          description: Fichier JSON
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletBackup"

  /api/v1/wallets/{address}/balance:
    parameters:
      - in: path
        name: address
        required: true
        schema: { type: string }
      - in: query
        name: cluster
        schema: { type: string, enum: [devnet, testnet, mainnet] }
      - in: query
        name: rpc
        schema: { type: string }
    get:
      tags: [Wallets]
      summary: Solde SOL d’une adresse
      responses:
        "200":
          description: Solde
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletBalanceResponse"
        "400": { description: Requête invalide }

  # ===================== Transfers / Airdrop =====================

  /api/v1/airdrop:
    post:
      tags: [Transfers]
      summary: Airdrop de SOL (Devnet seulement)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [address]
              properties:
                address: { type: string }
                sol:
                  type: number
                  format: float
                  default: 1
      responses:
        "200": { description: OK }
        "400": { description: Requête invalide }
        "500": { description: Erreur faucet }

  /api/v1/wallets/{wallet_id}/transfer:
    parameters:
      - in: path
        name: wallet_id
        required: true
        schema: { type: string }
      - in: query
        name: cluster
        schema: { type: string, enum: [devnet, testnet, mainnet] }
      - in: query
        name: rpc
        schema: { type: string }
    post:
      tags: [Transfers]
      summary: Transférer des SOL (wallet_id → pubkey destination)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [recipient_pubkey, amount_sol]
              properties:
                recipient_pubkey: { type: string }
                amount_sol:
                  type: number
                  format: float
      responses:
        "200":
          description: Transfert effectué
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferResult"
        "400": { description: Requête invalide }
        "404": { description: Introuvable }
        "500": { description: Erreur interne }

  /api/v1/wallets/mix:
    post:
      tags: [Transfers]
      summary: Mixer des SOL entre wallets (random/roundrobin)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [wallet_ids]
              properties:
                wallet_ids:
                  type: array
                  items: { type: string }
                strategy:
                  type: string
                  enum: [random, roundrobin]
                  default: random
      responses:
        "200":
          description: Historique des transferts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MixResponse"
        "400": { description: Requête invalide }
        "404": { description: Introuvable }
        "500": { description: Erreur mix }

  /api/v1/wallets/consolidate/{target_wallet_id}:
    parameters:
      - in: path
        name: target_wallet_id
        required: true
        schema: { type: string }
    post:
      tags: [Transfers]
      summary: Consolider les soldes vers un wallet cible
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id: { type: string }
                min_reserve_sol:
                  type: number
                  format: float
                  default: 0.00001
      responses:
        "200":
          description: Historique + ignorés
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsolidateResponse"
        "400": { description: Requête invalide }
        "404": { description: Introuvable }

  # ===================== Tokens =====================

  /api/v1/projects/{project_id}/token:
    parameters:
      - in: path
        name: project_id
        required: true
        schema: { type: string }
    patch:
      tags: [Tokens]
      summary: Éditer les métadonnées du token du projet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenPatchRequest"
      responses:
        "200":
          description: Métadonnées mises à jour
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  token: { $ref: "#/components/schemas/Token" }
    delete:
      tags: [Tokens]
      summary: Réinitialiser les métadonnées du token
      responses:
        "200": { description: Reset OK }

  /api/v1/projects/{project_id}/token/create:
    parameters:
      - in: path
        name: project_id
        required: true
        schema: { type: string }
    post:
      tags: [Tokens]
      summary: Créer réellement le token via Pump.fun
      responses:
        "202":
          description: Accepted (clé API requise)

components:

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key

  schemas:

    ProjectSummary:
      type: object
      properties:
        project_id: { type: string }
        name: { type: string }
        slug: { type: string }
        created_at: { type: string, format: date-time }
        wallets: { type: integer }

    ProjectDetail:
      type: object
      properties:
        project_id: { type: string }
        name: { type: string }
        slug: { type: string }
        created_at: { type: string, format: date-time }
        wallets:
          type: array
          items: { $ref: "#/components/schemas/WalletFull" }
        token:
          $ref: "#/components/schemas/Token"

    ProjectDetailResponse:
      type: object
      properties:
        ok: { type: boolean }
        project:
          $ref: "#/components/schemas/ProjectDetail"

    ProjectBackup:
      type: object
      properties:
        type: { type: string, example: project_backup }
        timestamp: { type: string }
        project:
          type: object
          properties:
            project_id: { type: string }
            name: { type: string }
            slug: { type: string }
        wallets:
          type: array
          items:
            $ref: "#/components/schemas/WalletBackupEntry"
        wallets_file:
          type: object
          description: Copie éventuelle de wallets.json

    WalletPublic:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        address: { type: string }
        created_at: { type: string }
        balance_sol: { type: number, format: float }

    WalletFull:
      allOf:
        - $ref: "#/components/schemas/WalletPublic"
        - type: object
          properties:
            private_key: { type: string, description: "clé privée base58 (en clair ici)" }
            private_key_json_64:
              type: array
              items: { type: integer }

    WalletBackupEntry:
      type: object
      properties:
        address: { type: string }
        private_key: { type: string }

    WalletBackup:
      type: object
      properties:
        type: { type: string, example: wallet_backup }
        timestamp: { type: string }
        project:
          type: object
          properties:
            project_id: { type: string }
            name: { type: string }
            slug: { type: string }
        wallet:
          $ref: "#/components/schemas/WalletBackupEntry"

    WalletBalanceResponse:
      type: object
      properties:
        ok: { type: boolean }
        address: { type: string }
        balance_sol: { type: number, format: float }
        rpc_url: { type: string }
        cluster: { type: string }

    TransferResult:
      type: object
      properties:
        ok: { type: boolean }
        from_wallet_id: { type: string }
        from_address: { type: string }
        to_address: { type: string }
        amount_sol: { type: number, format: float }
        signature: { type: string }
        rpc_url: { type: string }

    MixHistoryItem:
      type: object
      properties:
        from_wallet_id: { type: string }
        from_address: { type: string }
        to_address: { type: string }
        amount_sol: { type: number, format: float }
        signature: { type: string }

    MixResponse:
      type: object
      properties:
        ok: { type: boolean }
        strategy: { type: string }
        transfers:
          type: array
          items:
            $ref: "#/components/schemas/MixHistoryItem"

    ConsolidateHistoryItem:
      type: object
      properties:
        from_wallet_id: { type: string }
        from_address: { type: string }
        to_wallet_id: { type: string }
        to_address: { type: string }
        amount_sol: { type: number, format: float }
        signature: { type: string }

    ConsolidateResponse:
      type: object
      properties:
        ok: { type: boolean }
        target: { type: string }
        transfers:
          type: array
          items:
            $ref: "#/components/schemas/ConsolidateHistoryItem"
        skipped:
          type: array
          items:
            type: object
            properties:
              wallet_id: { type: string }
              reason: { type: string }

    Token:
      type: object
      properties:
        name: { type: string, example: "MyMeme" }
        symbol: { type: string, example: "MEME" }
        description: { type: string }
        image_uri: { type: string }
        website: { type: string }
        twitter: { type: string }
        telegram: { type: string }

    TokenPatchRequest:
      type: object
      properties:
        name: { type: string }
        symbol: { type: string }
        description: { type: string }
        image_uri: { type: string }
        website: { type: string }
        twitter: { type: string }
        telegram: { type: string }
